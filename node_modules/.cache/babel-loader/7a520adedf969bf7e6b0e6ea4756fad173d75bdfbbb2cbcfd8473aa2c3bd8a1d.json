{"ast":null,"code":"var _jsxFileName = \"/Users/chrisnavarro/Downloads/JokesGenerator/src/JokeList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JokeList({\n  numJokes = 5\n}) {\n  _s();\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(function () {\n    async function getJokes() {\n      let j = [...jokes];\n      let seenJokes = new Set();\n      try {\n        while (j.length < numJokes) {\n          let resp = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: {\n              Accept: \"application/json\"\n            }\n          });\n          let {\n            ...jokeObj\n          } = resp.data;\n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({\n              ...jokeObj,\n              votes: 0\n            });\n          } else {\n            console.error(\"Found Duplicate!\");\n          }\n        }\n        setJokes(j);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    if (jokes.length === 0) getJokes();\n  }, [jokes, numJokes]);\n  function generateNewJokes() {\n    setJokes([]);\n    setIsLoading(true);\n  }\n  function vote(id, sigma) {\n    setJokes(allJokes => allJokes.map(j => j.id === id ? {\n      ...j,\n      votes: j.votes + sigma\n    } : j));\n  }\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-4x fa-spinner fa-spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"JokeList\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"JokeList-getmore\",\n      onClick: generateNewJokes,\n      children: \"Get New Jokes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), sortedJokes.map(({\n      joke,\n      id,\n      votes\n    }) => /*#__PURE__*/_jsxDEV(Joke, {\n      text: joke,\n      id: id,\n      votes: votes,\n      vote: vote\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(JokeList, \"+iu6xHPOscTV/FNdMPqy/q1M2A4=\");\n_c = JokeList;\nexport default JokeList;\nvar _c;\n$RefreshReg$(_c, \"JokeList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Joke","jsxDEV","_jsxDEV","JokeList","numJokes","_s","jokes","setJokes","isLoading","setIsLoading","getJokes","j","seenJokes","Set","length","resp","get","headers","Accept","jokeObj","data","has","id","add","push","votes","console","error","generateNewJokes","vote","sigma","allJokes","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sortedJokes","sort","a","b","onClick","joke","text","_c","$RefreshReg$"],"sources":["/Users/chrisnavarro/Downloads/JokesGenerator/src/JokeList.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Joke from \"./Joke\";\nimport \"./JokeList.css\";\n\n/** List of jokes. */\n\nfunction JokeList({numJokes = 5}) {\n  const [jokes, setJokes] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(function () {\n    async function getJokes() {\n      let j = [...jokes];\n      let seenJokes = new Set();\n      try {\n        while (j.length < numJokes) {\n          let resp = await axios.get(\"https://icanhazdadjoke.com\", {\n            headers: { Accept: \"application/json\" }\n          });\n          let { ...jokeObj } = resp.data;\n\n          if (!seenJokes.has(jokeObj.id)) {\n            seenJokes.add(jokeObj.id);\n            j.push({ ...jokeObj, votes: 0 });\n          } else {\n            console.error(\"Found Duplicate!\");\n          }\n        }\n        setJokes(j);\n        setIsLoading(false)\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    if (jokes.length === 0) getJokes();\n  }, [jokes, numJokes]);\n\n  function generateNewJokes() {\n    setJokes([]);\n    setIsLoading(true);\n  }\n\n  function vote(id, sigma) {\n    setJokes(allJokes =>\n      allJokes.map(j => (j.id === id ? { ...j, votes: j.votes + sigma } : j))\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <i className=\"fas fa-4x fa-spinner fa-spin\" />\n      </div>\n      )\n  }\n\n  let sortedJokes = [...jokes].sort((a, b) => b.votes - a.votes);\n\n  return (\n    <div className=\"JokeList\">\n      <button className=\"JokeList-getmore\" onClick={generateNewJokes}>\n        Get New Jokes\n        </button>\n\n      {sortedJokes.map(({joke, id, votes}) => (\n        <Joke text={joke} key={id} id={id} votes={votes} vote={vote} />\n      ))}\n    </div>\n  );\n}\n\n\nexport default JokeList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}